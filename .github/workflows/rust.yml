name: Rust - build php extension (tgcrypto)

on:
  push:
    tags:
      - "v*.*.*"
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CRATE_NAME: tgcrypto

jobs:
  build:
    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3', '8.4']
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: armv7
            target: armv7-unknown-linux-gnueabihf
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: windows-2022
            arch: x86_64
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.os }} / ${{ matrix.arch }} / PHP ${{ matrix.php-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          tools: composer, phpunit
          extensions: mbstring, json

      - name: Install build deps (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential pkg-config git curl unzip libssl-dev libsqlite3-dev

      - name: Install build deps (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew update
          brew install pkg-config openssl cmake

      - name: Ensure cargo bin in PATH
        run: echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      - name: Install cross (for non-x86_64 linux cross builds)
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.arch != 'x86_64' }}
        run: |
          cargo install cross || true
          cross --version || true

      # Build step for Linux/macOS using bash (native x86_64 or mac)
      - name: Build (native or cross) - bash path
        if: ${{ matrix.os != 'windows-2022' }}
        shell: bash
        env:
          RUSTFLAGS: "-C target-cpu=native"
        run: |
          echo "Target: ${{ matrix.target }}, OS: $RUNNER_OS, ARCH: ${{ matrix.arch }}"
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            cargo build --release
          else
            # use cross for non-x86_64 linux targets (cross was installed earlier)
            cross build --release --target ${{ matrix.target }}
          fi

      # Build step for Windows using PowerShell
      - name: Build (windows) - pwsh path
        if: ${{ matrix.os == 'windows-2022' }}
        shell: pwsh
        run: |
          Write-Host "Building for Windows target: $Env:MATRIX_TARGET"
          # matrix variables are not automatically env vars; use the expression directly:
          $target = "${{ matrix.target }}"
          cargo build --release --target $target

      - name: List built files (Linux/mac)
        if: ${{ matrix.os != 'windows-2022' }}
        shell: bash
        run: |
          if [ -d "target/${{ matrix.target }}/release" ]; then
            ls -la target/${{ matrix.target }}/release
          else
            ls -la target/release
          fi

      - name: List built files (Windows)
        if: ${{ matrix.os == 'windows-2022' }}
        shell: pwsh
        run: |
          $p = "target\${{ matrix.target }}\release"
          if (Test-Path $p) { Get-ChildItem -Path $p -Force } else { Get-ChildItem -Path target\release -Force }

      - name: Copy artifact to artifacts/...
        if: ${{ matrix.os != 'windows-2022' }}
        shell: bash
        run: |
          mkdir -p artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cp target/${{ matrix.target }}/release/lib${CRATE_NAME}.dylib artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ 2>/dev/null || cp target/release/lib${CRATE_NAME}.dylib artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ || true
          else
            cp target/${{ matrix.target }}/release/lib${CRATE_NAME}.so artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ 2>/dev/null || cp target/release/lib${CRATE_NAME}.so artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ || true
          fi
          ls -la artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}

      - name: Copy artifact to artifacts/... (Windows)
        if: ${{ matrix.os == 'windows-2022' }}
        shell: pwsh
        run: |
          $out = "artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          $targetPath = "target\${{ matrix.target }}\release"
          if (Test-Path (Join-Path $targetPath "${CRATE_NAME}.dll")) {
            Copy-Item -Path (Join-Path $targetPath "${CRATE_NAME}.dll") -Destination $out -Force
          } elseif (Test-Path (Join-Path $targetPath "lib${CRATE_NAME}.dll")) {
            Copy-Item -Path (Join-Path $targetPath "lib${CRATE_NAME}.dll") -Destination $out -Force
          } else {
            Write-Host "No DLL found in $targetPath, checking target\release"
            if (Test-Path "target\release\${CRATE_NAME}.dll") {
              Copy-Item -Path "target\release\${CRATE_NAME}.dll" -Destination $out -Force
            }
          }
          Get-ChildItem -Path $out -Force

      - name: Minimal runtime test (Linux/mac)
        if: ${{ matrix.os != 'windows-2022' }}
        shell: bash
        run: |
          echo "Attempting to run php and load extension file (best-effort)."
          ART=artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            EXTFILE="$ART/lib${CRATE_NAME}.dylib"
          else
            EXTFILE="$ART/lib${CRATE_NAME}.so"
          fi
          if [ -f "$EXTFILE" ]; then
            php -d extension="$EXTFILE" -r "var_dump(extension_loaded('${CRATE_NAME}'))"
          else
            echo "No extension file found for runtime test (expected for cross builds)."
          fi || echo "Extension load test failed or not supported on this runner/arch."

      - name: Minimal runtime test (Windows)
        if: ${{ matrix.os == 'windows-2022' }}
        shell: pwsh
        run: |
          Write-Host "Attempting to run php and load extension file (Windows best-effort)."
          $art = "artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}"
          $dll = Join-Path $art "${CRATE_NAME}.dll"
          if (-not (Test-Path $dll)) {
            $dll = Join-Path $art "lib${CRATE_NAME}.dll"
          }
          if (Test-Path $dll) {
            php -d extension="$dll" -r "var_dump(extension_loaded('${CRATE_NAME}'))"
          } else {
            Write-Host "No DLL found for runtime test (possible cross/target mismatch)."
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}
          path: artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set release version (from Cargo.toml)
        id: set_tag
        run: |
          VERSION=$(grep -oP -m 1 'version\s*=\s*"\K[0-9.]+' Cargo.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Zip artifacts
        run: |
          mkdir -p release_assets
          for f in artifacts/*; do
            if [ -d "$f" ]; then
              base=$(basename "$f")
              zip -r "release_assets/${base}.zip" "$f"
            fi
          done
          ls -la release_assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.set_tag.outputs.version }}"
          name: "Release v${{ steps.set_tag.outputs.version }}"
          files: release_assets/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
