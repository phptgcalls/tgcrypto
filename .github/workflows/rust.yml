name: Rust - build php extension (tgcrypto)

on:
  push:
    tags:
      - "v*.*.*"
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3', '8.4']
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: armv7
            target: armv7-unknown-linux-gnueabihf
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: windows-2022
            arch: x86_64
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.os }} / ${{ matrix.arch }} / PHP ${{ matrix.php-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          tools: composer, phpunit
          extensions: mbstring, json # reduce noise, add any runtime libs you need

      - name: Install build dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential pkg-config git curl unzip
          # common libs that many php-ext-rs extensions need; add more if required
          sudo apt-get install -y libssl-dev libsqlite3-dev

      - name: Install build dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config openssl cmake

      - name: Ensure cargo bin in PATH
        run: echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      # For cross targets (aarch64, armv7) use `cross` to produce target artifacts via Docker/QEMU
      - name: Install cross (for non-x86_64 linux cross builds)
        if: startsWith(matrix.os, 'ubuntu') && matrix.arch != 'x86_64'
        run: |
          cargo install cross || true
          cross --version || true

      - name: Build (native or cross)
        env:
          RUSTFLAGS: "-C target-cpu=native"
        run: |
          set -e
          echo "Target: ${{ matrix.target }}, OS: $RUNNER_OS, ARCH: ${{ matrix.arch }}"

          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            # Build Windows MSVC target
            cargo build --release --target ${{ matrix.target }}
          elif [[ "${{ matrix.arch }}" == "x86_64" ]] && [[ "${{ matrix.os }}" != "ubuntu-latest" || "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # Native x86_64 (linux or macos)
            cargo build --release
          else
            # Use cross for other linux architectures (aarch64, armv7) on ubuntu runner
            cross build --release --target ${{ matrix.target }}
          fi

      - name: List built files
        run: ls -la target/${{ matrix.target }}/release || ls -la target/release

      - name: Copy artifact to a known place and show it
        run: |
          mkdir -p artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            # windows MSVC usually produces a .dll
            cp target/${{ matrix.target }}/release/${CRATE_NAME}.dll artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ 2>/dev/null || cp target/${{ matrix.target }}/release/lib${CRATE_NAME}.dll artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ || true
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cp target/${{ matrix.target }}/release/lib${CRATE_NAME}.dylib artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ || cp target/release/lib${CRATE_NAME}.dylib artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ || true
          else
            cp target/${{ matrix.target }}/release/lib${CRATE_NAME}.so artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ || cp target/release/lib${CRATE_NAME}.so artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}/ || true
          fi
          ls -la artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}

      - name: Minimal runtime test (attempt)
        shell: bash
        run: |
          set -e || true
          echo "Attempting to run php and load extension file (best-effort)."
          ART=artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            EXTFILE="$ART/${CRATE_NAME}.dll"
            pwsh -c "php -d extension=\"$EXTFILE\" -r \"var_dump(extension_loaded('${CRATE_NAME}'))\""
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            EXTFILE="$ART/lib${CRATE_NAME}.dylib"
            php -d extension="$EXTFILE" -r "var_dump(extension_loaded('${CRATE_NAME}'))"
          else
            EXTFILE="$ART/lib${CRATE_NAME}.so"
            php -d extension="$EXTFILE" -r "var_dump(extension_loaded('${CRATE_NAME}'))"
          fi || echo "Extension load test failed or not supported on this runner/arch (expected for cross builds)."

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}
          path: artifacts/${{ matrix.os }}-${{ matrix.arch }}-php${{ matrix.php-version }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set release version (from Cargo.toml)
        id: set_tag
        run: |
          VERSION=$(grep -oP -m 1 'version\s*=\s*"\K[0-9.]+' Cargo.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Zip artifacts
        run: |
          mkdir -p release_assets
          for f in artifacts/*; do
            if [ -d "$f" ]; then
              base=$(basename "$f")
              # zip everything inside that dir
              zip -r "release_assets/${base}.zip" "$f"
            fi
          done
          ls -la release_assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.set_tag.outputs.version }}"
          name: "Release v${{ steps.set_tag.outputs.version }}"
          files: release_assets/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
